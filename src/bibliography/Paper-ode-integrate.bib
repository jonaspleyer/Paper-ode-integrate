
@inproceedings{matsakisRustLanguage2014,
  title = {The Rust Language},
  booktitle = {Proceedings of the 2014 {{ACM SIGAda}} Annual Conference on {{High}} Integrity Language Technology},
  author = {Matsakis, Nicholas D. and Klock, Felix S.},
  year = {2014},
  month = oct,
  series = {{{HILT}} '14},
  pages = {103--104},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2663171.2663188},
  url = {https://doi.org/10.1145/2663171.2663188},
  urldate = {2022-09-07},
  abstract = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety. Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
  isbn = {978-1-4503-3217-0},
  keywords = {affine type systems,memory management,rust,systems programming}
}


